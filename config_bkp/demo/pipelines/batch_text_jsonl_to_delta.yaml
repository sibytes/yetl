dataflow:

  demo_landing:
    customer:
      type: Reader
      path_date_format: "%Y%m%d"
      file_date_format: "%Y%m%d"
      format: json
      path: landing/demo/{{timeslice_path_date_format}}/customer_{{timeslice_file_date_format}}.jsonl
      read:
        options:
          inferSchema: false
          badRecordsPath: "exceptions/landing/customer/{{timeslice_path_date_format}}"
      exceptions:
          path: "delta_lake/{{table_name}}_exceptions"
          database: landing
          table: "{{table_name}}_exceptions"
      thresholds:
        warning:
          min_rows: 1
          max_rows: 1000
          exception_count: 0
          exception_percent: 0
        error:
          min_rows: 0
          max_rows: 100000000
          exception_count: 50
          exception_percent: 80
          
    customer_preferences:
      type: Reader
      path_date_format: "%Y%m%d"
      file_date_format: "%Y%m%d"
      format: json
      path: landing/demo/{{timeslice_path_date_format}}/customer_preferences_{{timeslice_file_date_format}}.jsonl
      read:
        options:
          inferSchema: false
          badRecordsPath: "exceptions/landing/customer_preferences/{{timeslice_path_date_format}}"
      exceptions:
          path: "delta_lake/{{table_name}}_exceptions"
          database: landing
          table: "{{table_name}}_exceptions"
      thresholds:
        warning:
          min_rows: 0
          max_rows: 1000
          exception_count: 0
          exception_percent: 0
        error:
          min_rows: 0
          max_rows: 100000000
          exception_count: 50
          exception_percent: 80

  demo_raw:
    customer:
      type: DeltaWriter
      table:
        # defining a partition key here is an option if
        # we haven't defined the table using DDL with a partition key
        # if you define it in the ddl statement (PARTITIONED BY) and here, then
        # yetl will default to the ddl definition and throw a warning.
        partitioned_by:
          - _partition_key

        zorder_by:
          - email
          - id
        # table ddl is optional to provide full flexbility of how you can manaage the datalake (house)
        # it can be declared inline or via sql include files. If not provided an empty schema table is
        # created and merge schema (if false) is flipped to true on the initial load.
        ddl: "{{root}}"


        # https://docs.databricks.com/delta/table-properties.html
        # https://docs.delta.io/2.1.0/table-properties.html
        properties:

          #### DELTA LAKE TABLE PROPERTIES ####

          # https://docs.databricks.com/delta/table-properties.html
          # https://docs.delta.io/2.0.0/table-properties.html

          delta.appendOnly: false
          delta.checkpoint.writeStatsAsJson: true
          # delta.checkpoint.writeStatsAsStruct: None # Not Supported
          # delta.columnMapping.mode: true # not released yet
          
          delta.autoOptimize.autoCompact: true        # Databricks, but supported by yetl
          delta.autoOptimize.optimizeWrite: true      # Databricks, but supported by yetl
          # delta.targetFileSize: 104857600             # Databricks only
          # delta.autoCompact.maxFileSize: 134217728    # Databricks only
          # delta.isolationLevel:  WriteSerializable    # Databricks only
          # delta.setTransactionRetentionDuration: None # Databricks only
          # delta.targetFileSize: None                  # Databricks only
          # delta.tuneFileSizesForRewrites: None        # Databricks only
          # delta.schema.autoMerge.enabled: false       # Databricms only, best to set this in the options but can be set on a table.
          delta.compatibility.symlinkFormatManifest.enabled: false
          delta.dataSkippingNumIndexedCols: -1
          delta.logRetentionDuration: interval 30 days
          delta.deletedFileRetentionDuration: interval 1 week
          delta.enableChangeDataFeed: true
          delta.minReaderVersion: 1
          delta.minWriterVersion: 2
          delta.randomizeFilePrefixes: false
          delta.randomPrefixLength: 2

        # table constraints can be declared inline or via a SQL include file on the ddl
        check_constraints:
          amount_lower_bound: "amount > -1000"
          amount_upper_bound: "amount < 10000"
      
      format: delta
      path: delta_lake/raw/customer
      write:
        mode: append
        options:
          mergeSchema: true

