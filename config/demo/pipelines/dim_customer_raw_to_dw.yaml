# Loads data using SQL from the a delta table called customer in to a table called dim_customer
# A pattern that we would use to load golden tables such as a data warehouse or feature store.

dataflow:

  demo_dw:
    dim_customer_sql:
      type: SqlReader
      sql: "{{root}}"
    timeslice_format: "%Y%m%d"
    format: delta
    read:
      # datasets that have auto_io will automatically action the read.
      # where it is false the dataframe can be retrieved in the user implemented
      # dataflow and handled manually as desired.
      auto: true

    dim_customer:
      type: DeltaWriter
      partitioned_by:
        - _partition_key

      ddl: "{{ root }}"
      properties:
        yetl.metadata.datasetId: true
        yetl.schema.createIfNotExists: true

      deltalake_properties:
        yetl.schema.createIfNotExists: true
        yetl.delta.optimizeZOrderBy: true
        delta.appendOnly: false
        delta.checkpoint.writeStatsAsJson: true
        delta.compatibility.symlinkFormatManifest.enabled: false
        delta.dataSkippingNumIndexedCols: -1
        delta.logRetentionDuration: interval 30 days
        delta.deletedFileRetentionDuration: interval 1 week
        delta.enableChangeDataFeed: true
        delta.minReaderVersion: 1
        delta.minWriterVersion: 2
        delta.randomizeFilePrefixes: false
        delta.randomPrefixLength: 2

      # table constraints can be declared inline or via a SQL include file on the ddl
      check_constraints:
        amount_lower_bound: "amount > -1000"
        amount_upper_bound: "amount < 10000"
    
      format: delta
      path: delta_lake/{{ database_name }}/{{ table_name }}
      write:
        mode: append
        options:
          mergeSchema: true