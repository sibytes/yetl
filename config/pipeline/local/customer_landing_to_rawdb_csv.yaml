dataflow:
  retries: 0
  retry_wait: 1
  # enable_dataflow_types:
  #   - full_load
  #   - partition_load
  #   - merge_compare
  #   - merge_cdc
  #   - nuke 


  landing:
    customer:
      table:
          #### YETL TABLE PROPERTIES ####

          # builds a struct of metadata lineage and adds it the data in a column
          # called _yetl_lineage
          yetl.lineageEnabled: true

      path_date_format: "%Y%m%d"
      file_date_format: "%Y%m%d"
      format: csv
      path: data/landing/{{timeslice(path_date_format)}}/customer_{{timeslice(file_date_format)}}.csv
      read:
        # datasets that have auto_io will automatically action the read.
        # where it is false the dataframe can be retrieved in the user implemented
        # dataflow and handled manually as desired.
        auto: true
        options:
          mode: PERMISSIVE
          # if infer schema if true the schema will be ingored, generally speaking this is a bad approach for prod pipelines
          # however if you set to true you have to do the work of creating the schema and placing into the schema repo
          # So! if inferSchema is false which is the default for this framework and there isn't one, the 1st time
          # you run the pipeline it will infer it, save the schema into the repo. You either leave it as is or 
          # it gives you a starter schema to refine.
          inferSchema: false
          header: true
          # badRecordsPath: "data/exceptions/landing/customer/{{timeslice(path_date_format)}}"
      exceptions:
          path: "data/delta_lake/exceptions"
          database: landing
          table: exceptions

      thresholds:
        warning:
          min_rows: 1
          max_rows: 1000
          exception_count: 0
          exception_percent: 0
        error:
          min_rows: 0
          max_rows: 100000000
          exception_count: 50
          exception_percent: 80
          
    customer_preferences:
      table:
          #### YETL TABLE PROPERTIES ####

          # builds a struct of metadata lineage and adds it the data in a column
          # called _yetl_lineage
          yetl.lineageEnabled: true

      path_date_format: "%Y%m%d"
      file_date_format: "%Y%m%d"
      format: csv
      path: data/landing/{{timeslice(path_date_format)}}/customer_preferences_{{timeslice(file_date_format)}}.csv
      read:
        options:
          mode: PERMISSIVE
          inferSchema: false
          header: true
          # badRecordsPath: "data/exceptions/landing/customer_preferences/{{timeslice(path_date_format)}}"
      exceptions:
          path: "data/delta_lake/exceptions"
          database: landing
          table: exceptions
      thresholds:
        warning:
          min_rows: 0
          max_rows: 1000
          exception_count: 0
          exception_percent: 0
        error:
          min_rows: 0
          max_rows: 100000000
          exception_count: 50
          exception_percent: 80

  raw:
    customer:
      table:
        # defining a partition key here is an option if
        # we haven't defined the table using DDL with a partition key
        # if you define it in the dll statement and here, then
        # yetl will default to the dll definition and throw a warning.
        # IMPORTANT NOTE: if you change the partition key on existing table
        # the yetl will repartition the table ONLY IF the data flow property
        # yetl.allowRepartitioning: true
        partition_by:
          - _PARTITION_KEY
        # table ddl is optional to provide full flexbility of how you can manaage the datalake (house)
        # it can be declared inline or via sql include files. If not provided an empty schema table is
        # created and merge schema (if false) is flipped to true on the initial load.

        # ddl: |
        #   CREATE TABLE {{database_name}}.{{table_name}}
        #   (
        #     id            integer not null,
        #     first_name    string not null,
        #     last_name     string,
        #     email         string,
        #     gender        string,
        #     job_title     string,
        #     amount        double,
        #     allow_contact boolean,
        #     _PARTITION_KEY int
        #   )
        #   USING DELTA LOCATION '{{path}}';

        ddl: ./config/schema/deltalake


        # https://docs.databricks.com/delta/table-properties.html
        # https://docs.delta.io/2.0.0/table-properties.html
        properties:

          #### YETL TABLE PROPERTIES ####

          # allow yetl to repartition a table when the partitions are changed
          # If this is set to false and the partitions are changed then yetl will throw an exception
          yetl.allowRepartitioning: true
          # builds a struct of metadata lineage and adds it the data in a column
          # called _yetl_lineage
          yetl.lineageEnabled: true

          #### DELTA LAKE TABLE PROPERTIES ####

          # https://docs.databricks.com/delta/table-properties.html
          # https://docs.delta.io/2.0.0/table-properties.html

          delta.appendOnly: false
          delta.checkpoint.writeStatsAsJson: true
          # delta.checkpoint.writeStatsAsStruct: None # Not Supported
          # delta.columnMapping.mode: true # not released yet
          
          # delta.autoOptimize.autoCompact: true        # Databricks, but supported by yetl
          # delta.autoOptimize.optimizeWrite: true      # Databricks, but supported by yetl
          # delta.targetFileSize: 104857600             # Databricks only
          # delta.autoCompact.maxFileSize: 134217728    # Databricks only
          # delta.isolationLevel:  WriteSerializable    # Databricks only
          # delta.setTransactionRetentionDuration: None # Databricks only
          # delta.targetFileSize: None                  # Databricks only
          # delta.tuneFileSizesForRewrites: None        # Databricks only
          # delta.schema.autoMerge.enabled: false       # Databricms only, best to set this in the options but can be set on a table.
          delta.compatibility.symlinkFormatManifest.enabled: false
          delta.dataSkippingNumIndexedCols: -1
          delta.logRetentionDuration: interval 30 days
          delta.deletedFileRetentionDuration: interval 1 week
          delta.enableChangeDataFeed: true
          delta.minReaderVersion: 1
          delta.minWriterVersion: 2
          delta.randomizeFilePrefixes: false
          delta.randomPrefixLength: 2

        # table constraints can be declared inline or via a SQL include file on the ddl
        check_constraints:
          amount_lower_bound: "amount > -1000"
          amount_upper_bound: "amount < 10000"
      
      format: delta
      path: data/delta_lake/raw/customer
      write:
        mode: append
        options:
          mergeSchema: true
